export const cssCourseData = {
  title: "CSS та дизайн",
  description: "Від базової стилізації до просунутих макетів - навчіться робити ваші веб-сторінки красивими та адаптивними за допомогою сучасних CSS технік.",
  level: "Початковий",
  duration: "~6 годин",
  prerequisites: "Базові знання HTML",
  certificate: "Доступний після завершення",
  topics: [
    {
      id: 1,
      title: "Введення в CSS",
      difficulty: "Початковий",
      duration: "30 хв",
      completed: true,
      description: "Дізнайтеся, що таке CSS, як він працює та різні способи включення CSS у ваші HTML-документи.",
      learningPoints: [
        "Що таке CSS та для чого він використовується",
        "Способи підключення CSS до HTML",
        "Структура CSS правил",
        "Коментарі в CSS"
      ],
      theory: {
        "Що таке CSS?": "CSS (Cascading Style Sheets) - це мова стилів, яка використовується для опису зовнішнього вигляду та форматування HTML-документів. CSS дозволяє розробникам контролювати візуальне представлення веб-сторінок, включаючи кольори, шрифти, розміри, розташування елементів та багато іншого.",
        "Способи підключення CSS": "Зовнішні стилі: <link rel='stylesheet' href='styles.css'> - найкращий спосіб. Внутрішні стилі: <style></style> - для унікальних стилів сторінки. Inline-стилі: style='color: #333' - слід уникати в більшості випадків.",
        "Переваги зовнішніх стилів": "Зовнішні CSS файли можна кешувати браузером, використовувати на декількох сторінках, легше підтримувати та оновлювати. Це найкращий спосіб організації стилів для більшості проектів.",
        "Синтаксис CSS": "CSS правило складається з селектора та блоку оголошень. Селектор вказує, до яких елементів застосовувати стилі, а блок оголошень містить одну або більше властивостей та їх значення.",
        "Історія CSS": "CSS був створений у 1996 році Хоконом Віумом Лі. Еволюція: CSS1 (1996), CSS2 (1998), CSS2.1 (2004), CSS3 (модульний підхід з 2005), CSS4+ (поточні модулі)."
      }
    },
    {
      id: 2,
      title: "CSS селектори та специфічність",
      difficulty: "Початковий",
      duration: "40 хв",
      completed: true,
      description: "Опануйте селектори CSS, зрозумійте специфіку, дізнайтеся про каскад та успадкування.",
      learningPoints: [
        "Основні типи селекторів",
        "Комбіновані селектори",
        "Псевдокласи та псевдоелементи",
        "Специфічність та каскадність"
      ],
      theory: {
        "Типи селекторів": "Прості селектори - вибір елементів на основі імені, ідентифікатору, класу. Комбінаторні селектори - вибір елементів на основі визначених відношень між ними. Селектори псевдокласів - вибір елементів на основі визначеного стану. Селектори псевдоелементів - вибір і стилізація частини елемента. Селектори атрибутів - вибір елементів на основі атрибуту або значення атрибуту.",
        "Комбінатори": "Дочірні: вибирає прямі дочірні елементи (div > p). Сусідні: вибирає елементи, що йдуть одразу після іншого елемента (h1 + p). Загальні: вибирає всі елементи, що слідують за іншим елементом (h1 ~ p). Нащадки: вибирає всі нащадки (div p).",
        "Специфічність": "Це алгоритм, що використовується браузерами для визначення того оголошення CSS, яке найбільше відповідає елементові. Розраховується за формулою: inline стилі (1000) > ID (100) > класи/атрибути/псевдокласи (10) > елементи/псевдоелементи (1).",
        "Каскадність та наслідування": "Під каскадом розуміється одночасне застосування різних стильових правил до елементів документа. Концепція спадкування полягає в тому, що деякі властивості CSS успадковують за замовчуванням значення встановлені для батьківського елемента поточного елемента, а деякі не успадкують.",
        "Псевдокласи стану": ":hover, :focus, :active, :visited для інтерактивних елементів. :checked, :disabled, :required для форм. :first-child, :last-child, :nth-child() для структурних селекторів.",
        "Псевдоелементи": "::before та ::after для додавання контенту. ::first-line та ::first-letter для типографіки. ::placeholder для стилізації placeholder тексту."
      }
    },
    {
      id: 3,
      title: "Модель блоків та основи макету",
      difficulty: "Початковий",
      duration: "45 хв",
      completed: true,
      description: "Зрозумійте модель блоків CSS, дізнайтеся про різні типи відображення та опануйте позиціонування.",
      learningPoints: [
        "Модель коробки (Box Model)",
        "Властивість box-sizing",
        "Типи відображення (display)",
        "Позиціонування елементів"
      ],
      theory: {
        "Box Model": "Це концепція в CSS, яка визначає структуру і розміри елементів на веб-сторінці. Складається з чотирьох частин: Content (вміст) - власне вміст елемента. Padding (відступ) - внутрішній відступ елемента. Border (рамка) - рамка, що оточує внутрішню частину елемента. Margin (поле) - зовнішній відступ елемента.",
        "Box-sizing": "Content-box - стандартна поведінка, width і height задають тільки розміри вмісту. Border-box - width і height включають padding і border, що дозволяє легко контролювати загальні розміри елемента. Рекомендується використовувати border-box для всіх елементів.",
        "Позиціонування": "Static - стандартне позиціонування в потоці документа. Relative - позиціювання щодо самого себе, не виходить з потоку. Absolute - позиціювання відносно найближчого відносно позиціонованого предка, виходить з потоку. Fixed - позиціювання відносно viewport, завжди видимий при прокручуванні. Sticky - липке позиціювання, змінює значення з relative на fixed під час прокручування.",
        "Z-index": "Визначає положення елемента по осі z. Елементи з більшим z-index перекривають елементи з меншим. Працює тільки для позиціонованих елементів. Створює новий stacking context.",
        "Display типи": "Block - займає всю доступну ширину, починається з нового рядка. Inline - займає тільки потрібну ширину, в одному рядку з іншими. Inline-block - поєднує властивості block та inline. None - елемент не відображається і не займає місце.",
        "Viewport одиниці": "vw, vh - відсотки від ширини/висоти viewport. vmin, vmax - мінімальний/максимальний розмір viewport. Корисні для адаптивного дизайну."
      }
    },
    {
      id: 4,
      title: "Система макету Flexbox",
      difficulty: "Середній",
      duration: "50 хв",
      completed: true,
      description: "Опануйте Flexbox для створення гнучких та адаптивних одновимірних макетів.",
      learningPoints: [
        "Основи Flexbox",
        "Flex-контейнер та flex-елементи",
        "Властивості flex-контейнера",
        "Властивості flex-елементів"
      ],
      theory: {
        "Що таке Flexbox": "Flexbox найкраще підходить для простих одновимірних макетів, таких як вирівнювання елементів в одному рядку або стовпці, адаптивних компонентів, вирівнювання елементів та управління простором між ними. Він вирішує багато проблем традиційного CSS макету.",
        "Flex-контейнер та flex-елемент": "Flex-контейнер встановлює новий гнучкий контекст форматування для його вмісту. Flex-контейнером є той елемент, у якого задано властивість display: flex або display: inline-flex. Flex-елементом є кожен дочірній елемент flex-контейнера.",
        "Основні властивості контейнера": "flex-direction - напрямок головної осі (row, column, row-reverse, column-reverse). justify-content - вирівнювання по головній осі. align-items - вирівнювання по поперечній осі. flex-wrap - перенесення елементів. gap - проміжки між елементами.",
        "Властивості flex-елементів": "flex-grow - коефіцієнт росту (як елемент розширюється). flex-shrink - коефіцієнт скорочення (як елемент стискається). flex-basis - базовий розмір до розподілу вільного простору. align-self - індивідуальне вирівнювання, перекриває align-items контейнера.",
        "Вісі в Flexbox": "Головна вісь (main axis) - основний напрямок розкладки елементів. Поперечна вісь (cross axis) - перпендикулярна до головної. Напрямок осей залежить від flex-direction.",
        "Практичні застосування": "Центрування елементів, створення навігаційних меню, картки однакової висоти, розподіл простору між елементами, адаптивні компоненти."
      }
    },
    {
      id: 5,
      title: "Система макету CSS Grid",
      difficulty: "Середній",
      duration: "55 хв",
      completed: true,
      description: "Вивчіть CSS Grid для створення складних двовимірних макетів з точним контролем.",
      learningPoints: [
        "Основи CSS Grid",
        "Визначення сітки",
        "Розміщення елементів в сітці",
        "Адаптивні сітки"
      ],
      theory: {
        "Що таке CSS Grid": "Grid найкраще підходить для складних двовимірних макетів, де потрібно розмістити елементи у сітці, задавати розміри і позиціювання як по горизонталі, так і по вертикалі. Grid дає повний контроль над макетом сторінки.",
        "Основні поняття": "Grid Container - батьківський елемент з display: grid. Grid Items - дочірні елементи grid контейнера. Grid Lines - лінії, що розділяють сітку. Grid Tracks - рядки та стовпці сітки. Grid Cells - окремі комірки сітки. Grid Areas - прямокутні області сітки.",
        "Властивості контейнера": "grid-template-columns - визначає стовпці. grid-template-rows - визначає рядки. grid-template-areas - визначає іменовані області. gap - проміжки між елементами. justify-items - вирівнювання елементів по горизонталі. align-items - вирівнювання елементів по вертикалі.",
        "Одиниці виміру Grid": "fr (fraction) - частка доступного простору, найкорисніша одиниця Grid. repeat() - повторення шаблону, економить код. minmax() - мінімальне та максимальне значення, забезпечує гнучкість. auto-fit / auto-fill - автоматичне підлаштування кількості стовпців.",
        "Іменовані лінії та області": "Можна давати назви лініям сітки для зручності. Grid areas дозволяють створювати семантичні макети з назвами областей. Особливо корисно для складних макетів.",
        "Субсітки (Subgrid)": "Дозволяє створювати вкладені сітки, які наслідують лінії батьківської сітки. Поки що обмежена підтримка браузерами, але дуже потужна функція."
      }
    },
    {
      id: 6,
      title: "Адаптивний дизайн та медіа-запити",
      difficulty: "Середній",
      duration: "45 хв",
      completed: false,
      description: "Створюйте адаптивні веб-сайти, які чудово працюють на всіх пристроях, використовуючи медіа-запити та гнучкі блоки.",
      learningPoints: [
        "Медіа-запити та їх синтаксис",
        "Одиниці виміру (px, em, rem, %, vw, vh)",
        "Типи верстки (гумова, адаптивна, респонсивна)",
        "Mobile-first підхід"
      ],
      theory: {
        "Медіа-запити": "Медіа-запити (media queries) - це потужний інструмент CSS, який дозволяє застосовувати стилі до елементів веб-сторінки залежно від характеристик пристрою, на якому ця сторінка переглядається. Вони є основним компонентом для створення адаптивного дизайну.",
        "Одиниці виміру": "px - базова абсолютна одиниця виміру, точна але не гнучка. em - одиниця виміру відносно поточного розміру шрифту, гарна для компонентів. rem - одиниця виміру відносно розміру шрифту елемента html, найкраща для типографіки. % - відсотки від батьківського елемента. vw/vh - відсотки від ширини/висоти viewport. vmin/vmax - мінімальний/максимальний розмір viewport.",
        "Типи верстки": "Гумова верстка - блоки змінюють ширину залежно від розміру вікна браузера і часто задаються у відсотках. Адаптивна верстка - реалізується за допомогою медіа правил. Для кожного окремого розміру екрана відображається різна верстка. Респонсивна верстка - поєднання гумової та адаптивної верстки. Найскладніша в реалізації, але найприйнятніший результат.",
        "Популярні breakpoints": "Mobile: 320px - 768px. Tablet: 768px - 1024px. Desktop: 1024px і більше. Large Desktop: 1440px і більше. Важливо вибирати breakpoints на основі контенту, а не пристроїв.",
        "Mobile-first підхід": "Спочатку пишуться стилі для мобільних пристроїв, потім додаються стилі для більших екранів через min-width медіа-запити. Це забезпечує кращу продуктивність та користувацький досвід.",
        "Медіа-запити для доступності": "prefers-reduced-motion для користувачів, які не хочуть анімації. prefers-color-scheme для автоматичного переключення темної/світлої теми. prefers-contrast для високого контрасту."
      }
    },
    {
      id: 7,
      title: "CSS змінні та просунуті функції",
      difficulty: "Середній",
      duration: "40 хв",
      completed: false,
      description: "Вивчіть користувацькі властивості CSS, розширені функції та сучасні можливості CSS.",
      learningPoints: [
        "CSS-перемінні (custom properties)",
        "CSS функції (calc, clamp, min, max)",
        "Кольори та градієнти",
        "Сучасні CSS властивості"
      ],
      theory: {
        "CSS-перемінні": "CSS-перемінні (також відомі як кастомні властивості) дозволяють зберігати значення CSS властивостей у змінних і використовувати їх повторно в стилях. Оголошення: --назва-змінної. Використання: var(--назва-змінної, значення-за-замовчуванням). Вони можуть змінюватися за допомогою JavaScript.",
        "CSS функції": "calc() - дозволяє виконувати математичні обчислення з різними одиницями виміру. clamp() - обмежує значення між мінімумом і максимумом, ідеально для адаптивної типографіки. min() - повертає найменше значення з списку. max() - повертає найбільше значення з списку. minmax() - для Grid, встановлює мін і макс значення.",
        "Кольорові простори": "hex - #ff0000, компактний запис. rgb() - rgb(255, 0, 0), інтуїтивний. rgba() - rgba(255, 0, 0, 0.5), з прозорістю. hsl() - hsl(0, 100%, 50%), зручний для роботи з кольорами. hsla() - hsla(0, 100%, 50%, 0.5), HSL з прозорістю. CSS3 додав нові кольорові простори: lab(), lch(), oklch().",
        "Градієнти": "linear-gradient() - лінійний градієнт, може мати кілька кольорів та напрямків. radial-gradient() - радіальний градієнт від центру. conic-gradient() - конічний градієнт навколо точки. repeating-linear-gradient() - повторюваний лінійний градієнт.",
        "Сучасні CSS властивості": "aspect-ratio для підтримки співвідношення сторін. container queries для адаптивних компонентів. :has() селектор для батьківських елементів. accent-color для кольору елементів форм. scroll-behavior для плавного прокручування.",
        "CSS логічні властивості": "margin-inline, padding-block замість left/right/top/bottom. Підтримують різні напрямки письма та інтернаціоналізацію."
      }
    },
    {
      id: 8,
      title: "Анімації та переходи",
      difficulty: "Середній",
      duration: "50 хв",
      completed: false,
      description: "Створюйте плавні анімації та переходи, щоб покращити взаємодію з користувачем.",
      learningPoints: [
        "CSS переходи (transitions)",
        "CSS анімації (animations)",
        "Ключові кадри (@keyframes)",
        "Performance та оптимізація анімацій"
      ],
      theory: {
        "CSS переходи": "CSS-переходи дозволяють плавно змінювати значення CSS-властивостей протягом заданого часу при виникненні певної події. Основні властивості: transition-property - які властивості анімувати. transition-duration - тривалість анімації. transition-timing-function - швидкість зміни анімації. transition-delay - затримка перед початком.",
        "CSS анімації": "CSS-анімації дозволяють створювати більш складні та контрольовані анімаційні ефекти, визначаючи серії ключових кадрів (@keyframes). Основні властивості: animation-name - ім'я анімації. animation-duration - тривалість. animation-timing-function - функція часу. animation-delay - затримка. animation-iteration-count - кількість повторень. animation-direction - напрямок. animation-fill-mode - стилі до і після виконання.",
        "Функції часу": "ease - повільний старт, швидка середина, повільний кінець (за замовчуванням). ease-in - повільний старт. ease-out - повільний кінець. ease-in-out - повільний старт і кінець. linear - рівномірна швидкість. cubic-bezier() - кастомна функція для точного контролю.",
        "Performance анімацій": "Оптимізовані властивості (не викликають reflow/repaint): transform (translate, rotate, scale), opacity, filter. Уникайте анімації: width, height, top, left, background-color, border, margin, padding. Використовуйте will-change для підготовки браузера до анімації.",
        "Анімація та доступність": "Поважайте налаштування prefers-reduced-motion для користувачів з вестибулярними розладами. Робіть анімації короткими та ненав'язливими. Завжди надавайте альтернативи для критично важливої інформації.",
        "Web Animations API": "JavaScript API для більш точного контролю анімацій. Дозволяє створювати складні анімації з можливістю паузи, відтворення та синхронізації."
      }
    },
    {
      id: 9,
      title: "Візуальні ефекти та стилізація",
      difficulty: "Середній",
      duration: "35 хв",
      completed: false,
      description: "Вивчіть просунуті візуальні ефекти, включаючи фільтри, тіні та сучасні техніки стилізації.",
      learningPoints: [
        "Фільтри та візуальні ефекти",
        "Тіні (box-shadow, text-shadow)",
        "Трансформації (transform)",
        "Типографіка та веб-шрифти"
      ],
      theory: {
        "CSS фільтри": "Filter властивість застосовує графічні ефекти до елементів: blur() - розмиття. brightness() - яскравість. contrast() - контрастність. grayscale() - сірий колір. hue-rotate() - поворот відтінку. saturate() - насиченість. sepia() - сепія ефект. drop-shadow() - тінь.",
        "Тіні": "Box-shadow - додає тінь до елемента. Синтаксис: h-offset v-offset blur spread color inset. Text-shadow - додає тінь до тексту. Синтаксис: h-offset v-offset blur color. Можна використовувати множинні тіні для створення складних ефектів.",
        "Трансформації": "Transform дозволяє змінювати елементи без впливу на потік документа: translate() - переміщення. rotate() - обертання. scale() - масштабування. skew() - нахил. matrix() - комплексна трансформація. Також підтримуються 3D трансформації.",
        "Типографіка": "font-family - сімейство шрифтів, важливо вказувати fallback шрифти. font-weight - вага шрифта (100-900). font-style - стиль шрифта. line-height - висота рядка, краще задавати без одиниць. letter-spacing - відстань між символами. text-align - вирівнювання тексту.",
        "Веб-шрифти": "Google Fonts, Adobe Fonts для безкоштовних та комерційних шрифтів. @font-face для кастомних шрифтів. font-display для контролю завантаження шрифтів. Variable fonts для динамічного контролю ваги та ширини.",
        "Сучасні візуальні ефекти": "backdrop-filter для ефекту скла. clip-path для нестандартних форм. mask для маскування елементів. mix-blend-mode для змішування кольорів. CSS-in-JS для динамічних стилів."
      }
    },
    {
      id: 10,
      title: "Найкращі практики CSS та оптимізація",
      difficulty: "Просунутий",
      duration: "40 хв",
      completed: false,
      description: "Вивчіть методології CSS, методи оптимізації та найкращі практики для створення зручного для обслуговування коду.",
      learningPoints: [
        "CSS методології (BEM, OOCSS)",
        "Оптимізація та performance",
        "CSS препроцесори",
        "Кращі практики та організація коду"
      ],
      theory: {
        "CSS методології": "BEM (Block Element Modifier) - методологія іменування класів: .block__element--modifier. OOCSS (Object-Oriented CSS) - об'єктно-орієнтований підхід, розділення структури та оформлення. SMACSS - масштабована та модульна архітектура. Atomic CSS - атомарний підхід з мікро-класами.",
        "Performance оптимізація": "Мінімізація CSS файлів для зменшення розміру. Видалення невикористаного CSS (PurgeCSS, UnCSS). Оптимізація селекторів - уникайте надто глибокої вкладеності. Використання CSS sprites для іконок. Критичні стилі inline для швидкого першого рендера. Завантаження некритичних стилів асинхронно.",
        "CSS препроцесори": "Sass/SCSS - найпопулярніший препроцесор з змінними, вкладеністю, міксинами, функціями та операціями, імпортами та модулями. PostCSS - інструмент для трансформації CSS з автопрефіксами, майбутніми CSS властивостями, оптимізацією. Less - альтернативний препроцесор.",
        "Організація коду": "Структура файлів: Базові стилі (reset, typography), Компоненти, Утиліти, Змінні та конфігурація. Правила іменування: Використовуйте семантичні назви, уникайте вкладеності глибше 3 рівнів, групуйте схожі властивості.",
        "CSS архітектура": "ITCSS (Inverted Triangle CSS) - архітектура у вигляді перевернутого трикутника. CSS модулі для ізоляції стилів компонентів. CSS-in-JS для динамічних стилів у JavaScript додатках. Design tokens для узгодженості дизайн-системи.",
        "Сучасні інструменти": "CSS Grid Layout Level 2 з subgrid. Container Queries для адаптивних компонентів. CSS Cascade Layers для кращого контролю каскаду. Houdini API для розширення CSS можливостей. CSS Custom Highlights API для кастомного виділення тексту."
      }
    },
    {
      id: 11,
      title: "Доступність та сучасні CSS функції",
      difficulty: "Просунутий",
      duration: "45 хв",
      completed: false,
      description: "Дізнайтеся про створення доступних стилів та використання найновіших CSS можливостей.",
      learningPoints: [
        "CSS для покращення доступності",
        "Сучасні CSS селектори та функції",
        "CSS Container Queries",
        "CSS Houdini та майбутнє CSS"
      ],
      theory: {
        "CSS для доступності": "Достатній контраст кольорів (мінімум 4.5:1 для звичайного тексту, 3:1 для великого). Focus стилі для навігації з клавіатури. Підтримка prefers-reduced-motion для користувачів з вестибулярними розладами. prefers-color-scheme для автоматичного переключення тем. Використання relative одиниць для кращого масштабування.",
        "Сучасні CSS селектори": ":has() - батьківський селектор для вибору елементів на основі їх нащадків. :is() та :where() для групування селекторів з різною специфічністю. :focus-visible для кращого фокусу. :focus-within для батьківських елементів. ::marker для стилізації маркерів списків.",
        "CSS Container Queries": "Дозволяють адаптувати стилі компонентів на основі розміру їх контейнера, а не viewport. @container запити. container-type та container-name властивості. Революційний підхід до адаптивного дизайну на рівні компонентів.",
        "CSS Houdini": "Набір низькорівневих API для розширення CSS. Paint API для кастомних фонів. Layout API для власних алгоритмів макету. Animation API для високопродуктивних анімацій. Properties and Values API для типізованих CSS властивостей.",
        "CSS Cascade Layers": "@layer директива для організації CSS в шари з контрольованою специфічністю. Дозволяє краще структурувати великі CSS кодові бази та уникати конфліктів специфічності.",
        "Майбутнє CSS": "CSS Nesting для вкладеної синтаксису без препроцесорів. CSS Trigonometric Functions (sin, cos, tan). CSS Color Level 4 з новими кольоровими просторами. CSS Anchored Positioning для точного позиціонування відносно інших елементів."
      }
    }
  ]
};